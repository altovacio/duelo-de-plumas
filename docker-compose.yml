services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
      - "5678:5678"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - db
    # COMMANDS - Choose one based on your needs:

    # 1. DEBUGGING COMMAND (current): 
    #    Starts the application with the debugpy debugger, waiting for a client to attach.
    #    Uvicorn will use --reload for automatic code reloading.
    command: >
      sh -c "./wait-for-it.sh db:5432 --timeout=30 --strict -- \
      python scripts/create_admin.py setup && \
      python -m debugpy --wait-for-client --listen 0.0.0.0:5678 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

    # 2. PRODUCTION-LIKE COMMAND (commented out):
    #    Starts the application directly with Uvicorn. No debugger, no auto-reload.
    #    For true production, ensure DEBUG environment variables are also appropriately set to False.
    # command: >
    #   sh -c \"./wait-for-it.sh db:5432 --timeout=30 --strict -- \
    #   python scripts/create_admin.py setup && \
    #   uvicorn app.main:app --host 0.0.0.0 --port 8000\"
    restart: always
    
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backend/init-test-db.sh:/docker-entrypoint-initdb.d/init-test-db.sh
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=duelo_de_plumas
    restart: always
    
  frontend:
    build: ./frontend
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    depends_on:
      - backend
    restart: always

volumes:
  postgres_data: 